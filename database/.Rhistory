return(x - td)
}
bdf_header <- readEdfHeader("D:/Work/Dropbox (UFL)/MultipleCP-ReducedRank-JASA/application/database/EEG_Cat_Study4_Resting_S1.bdf")
signal <- readEdfSignals(bdf_header)
channels <- c('Fp1', 'Fpz', 'Fp2', 'F7', 'F3', 'Fz', 'F4', 'F8', 'T7', 'C3', 'Cz', 'C4', 'T8',
'P7', 'P3', 'Pz', 'P4', 'P8', 'O1', 'Oz', 'O2')
ts_dataset <- c()
for(ch in channels){
temp <- signal[[ch]]$signal
ts_dataset <- cbind(ts_dataset, temp)
print(paste('Loading... channel:', ch, sep = ' '))
}
colnames(ts_dataset) <- channels
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
data1 <- na.omit(ts_dataset) # remove NA values (after detrending, we have NA for the begining and ending time series)
data <- data1[2049:70000,]   # remove the first redundant 8 resting seconds
#MTSplot(data)
######### Use block-wise algorithm to estimate change-point ##########
library(Rcpp)
library(RcppArmadillo)
source("functions_JCGS_C.R")
sourceCpp("var_break_fit_block.cpp")
sourceCpp("var_lasso_brk.cpp")
bdf_header <- readEdfHeader("D:/Work/Dropbox (UFL)/MultipleCP-ReducedRank-JASA/application/database/EEG_Cat_Study4_Resting_S8.bdf")
signal <- readEdfSignals(bdf_header)
channels <- c('Fp1', 'Fpz', 'Fp2', 'F7', 'F3', 'Fz', 'F4', 'F8', 'T7', 'C3', 'Cz', 'C4', 'T8',
'P7', 'P3', 'Pz', 'P4', 'P8', 'O1', 'Oz', 'O2')
ts_dataset <- c()
for(ch in channels){
temp <- signal[[ch]]$signal
ts_dataset <- cbind(ts_dataset, temp)
print(paste('Loading... channel:', ch, sep = ' '))
}
colnames(ts_dataset) <- channels
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
data1 <- na.omit(ts_dataset) # remove NA values (after detrending, we have NA for the begining and ending time series)
data <- data1[2049:70000,]   # remove the first redundant 8 resting seconds
MTSplot(data)
### Parameters settings
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-4)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
View(second.step.local.new)
source("functions_JCGS_C.R")
### Parameters settings
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-4)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(6956)
b_n <- 5*floor(sqrt(T))
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, p, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
View(bss)
temp$pts.3.grid
temp$pts.3
log(T)*log(k)
33^1.5
33^2
34^2
blocks
1300*1.5
### Parameters settings
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-4)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(6956)
b_n <- 5*floor(sqrt(T))
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, p, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
temp$pts.3.grid
source("functions_JCGS_C.R")
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-4)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(6956)
b_n <- 5*floor(sqrt(T))
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, p, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
temp$pts.3
temp$pts.3.grid
MTSplot(data)
View(second.step.local.new)
source("functions_JCGS_C.R")
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-4)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(6956)
b_n <- 5*floor(sqrt(T))
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, p, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
temp$pts.3.grid
temp$pts.3
View(bss)
View(third.step.final.exhaust)
View(second.step.local.new)
View(break.var.local.new)
source("functions_JCGS_C.R")
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-4)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(6956)
b_n <- 5*floor(sqrt(T))
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, p, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
temp$pts.3.grid
temp$an
View(bss)
blocks
6*floor(sqrt(T))
View(third.step.final.exhaust)
View(var_lasso_brk)
View(bss)
View(first.step.cv.new.blocks)
source("functions_JCGS_C.R")
# source('functions_SBDetection_Peiliang.R')
### Parameters settings
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-4)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(6956)
b_n <- floor(sqrt(T))
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, p, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
temp$pts.1
temp$pts.3.grid
temp$pts.1
source("functions_JCGS_C.R")
lambda.1.cv
### Parameters settings
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-2)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(6956)
b_n <- 3*floor(sqrt(T))
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, p, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
View(second.step.local.new)
View(third.step.final.exhaust)
View(bss)
source("functions_JCGS_C.R")
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 1                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-2)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(123456)
b_n <- 1000
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, p, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
temp$pts.3
MTSplot(data)
pts.final <- temp$pts.3
abline(v = pts.final, col = 'red')
pts.final
pts.final <- temp$pts.3[[1]]
abline(v = pts.final, col = 'red')
T <- dim(data)[1]
k <- dim(data)[2]
tol <- 2*10^(-2)                ### tolerance
step.size <- 2*10^(-4)          ### step size
p = p.t <- 3                    ### the selected AR order
max.iteration <- 200             ### max iteration for blocked detection code.
### Tuning parameters settings ###
kk <- 5
l.init.1 <- (1e-2)*( log(T) + 2*log(k) + log(p+1) )^0.5          ### Don't change for this subject!
l1 <- seq(l.init.1,kk*l.init.1,l.init.1)
l.init.2 <- l1[length(l1)] + (log(T))*l.init.1
l2 <- seq(l.init.2,kk*l.init.2,l.init.2)
l.init.3 <- l2[length(l2)] + ((T)^(0.5))*l.init.2
l3 <- seq(l.init.3,kk*l.init.3,l.init.3)
lambda.1.cv <- rev(c(l1, l2, l3))
lambda.2.cv <-  c(0.10*sqrt(log(k)/T))
set.seed(123456)
b_n <- 1000
blocks <- seq(0, T, b_n)
ptm <- proc.time()
temp <- bss("LASSO", data, lambda.1.cv, lambda.2.cv, 3, max.iteration = max.iteration,
tol = tol, step.size = (1/2)*10^(-4), blocks, cpp=TRUE)
print(proc.time() - ptm)
pts.final <- temp$pts.3[[1]]
abline(v = pts.final, col = 'red')
temp$pts.3.grid
temp$pts.1
setwd("d:/Work/Dropbox (UFL)/Project 4/application")
library(MTS)
library(edfReader)
library(forecast)
normalize <- function(x){
return((x - mean(x)) / sd(x))
}
detrending <- function(x){
td <- ma(x, order = 256)
return(x - td)
}
channels <- c('Fp1', 'Fpz', 'Fp2', 'F7', 'F3', 'Fz', 'F4', 'F8', 'T7', 'C3', 'Cz', 'C4', 'T8',
'P7', 'P3', 'Pz', 'P4', 'P8', 'O1', 'Oz', 'O2')
prefix <- 'EEG_Cat_Study4_Resting_S'
for(i in 1:22){
name <- paste(prefix, i, '.bdf', sep = '')
print(name)
bdf_header <- readEdfHeader(name)
signal <- readEdfSignals(bdf_header)
ts_dataset <- c()
for(ch in channels){
temp <- signal[[ch]]$signal
ts_dataset <- cbind(ts_dataset, temp)
print(paste('Loading... channel:', ch, sep = ' '))
}
colnames(ts_dataset) <- channels
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
data1 <- na.omit(ts_dataset) # remove NA values (after detrending, we have NA for the begining and ending time series)
MTSplot(data1)
print('======================================')
}
setwd("d:/Work/Dropbox (UFL)/Project 4/application/database")
library(MTS)
library(edfReader)
library(forecast)
normalize <- function(x){
return((x - mean(x)) / sd(x))
}
detrending <- function(x){
td <- ma(x, order = 256)
return(x - td)
}
channels <- c('Fp1', 'Fpz', 'Fp2', 'F7', 'F3', 'Fz', 'F4', 'F8', 'T7', 'C3', 'Cz', 'C4', 'T8',
'P7', 'P3', 'Pz', 'P4', 'P8', 'O1', 'Oz', 'O2')
prefix <- 'EEG_Cat_Study4_Resting_S'
for(i in 1:22){
name <- paste(prefix, i, '.bdf', sep = '')
print(name)
bdf_header <- readEdfHeader(name)
signal <- readEdfSignals(bdf_header)
ts_dataset <- c()
for(ch in channels){
temp <- signal[[ch]]$signal
ts_dataset <- cbind(ts_dataset, temp)
print(paste('Loading... channel:', ch, sep = ' '))
}
colnames(ts_dataset) <- channels
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
data1 <- na.omit(ts_dataset) # remove NA values (after detrending, we have NA for the begining and ending time series)
MTSplot(data1)
print('======================================')
}
name
bdf_header <- readEdfHeader(name)
setwd("D:/Work/Dropbox (UFL)/MultipleCP-ReducedRank-JASA/application/database")
setwd("D:/Work/Dropbox (UFL)/MultipleCP-ReducedRank-JASA/application/database")
library(MTS)
library(edfReader)
library(forecast)
normalize <- function(x){
return((x - mean(x)) / sd(x))
}
detrending <- function(x){
td <- ma(x, order = 256)
return(x - td)
}
channels <- c('Fp1', 'Fpz', 'Fp2', 'F7', 'F3', 'Fz', 'F4', 'F8', 'T7', 'C3', 'Cz', 'C4', 'T8',
'P7', 'P3', 'Pz', 'P4', 'P8', 'O1', 'Oz', 'O2')
prefix <- 'EEG_Cat_Study4_Resting_S'
for(i in 1:22){
name <- paste(prefix, i, '.bdf', sep = '')
print(name)
bdf_header <- readEdfHeader(name)
signal <- readEdfSignals(bdf_header)
ts_dataset <- c()
for(ch in channels){
temp <- signal[[ch]]$signal
ts_dataset <- cbind(ts_dataset, temp)
print(paste('Loading... channel:', ch, sep = ' '))
}
colnames(ts_dataset) <- channels
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
data1 <- na.omit(ts_dataset) # remove NA values (after detrending, we have NA for the begining and ending time series)
MTSplot(data1)
print('======================================')
}
dim(data1)
sd(data1[,1])
sd(data1[,2])
sd(data1[,3])
sd(data1[,4])
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
data1 <- na.omit(ts_dataset) # remove NA values (after detrending, we have NA for the begining and ending time series)
sd(data1[,1])
sd(data1[,2])
sd(data1[,3])
dim(data1)
ts_dataset
name
name <- paste(prefix, i, '.bdf', sep = '')
print(name)
bdf_header <- readEdfHeader(name)
signal <- readEdfSignals(bdf_header)
ts_dataset <- c()
for(ch in channels){
temp <- signal[[ch]]$signal
ts_dataset <- cbind(ts_dataset, temp)
print(paste('Loading... channel:', ch, sep = ' '))
}
colnames(ts_dataset) <- channels
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
sd(ts_dataset[,1])
ts_dataset[1:10,1]
ts_dataset[3000:3100,1]
name <- paste(prefix, i, '.bdf', sep = '')
print(name)
bdf_header <- readEdfHeader(name)
signal <- readEdfSignals(bdf_header)
ts_dataset <- c()
for(ch in channels){
temp <- signal[[ch]]$signal
ts_dataset <- cbind(ts_dataset, temp)
print(paste('Loading... channel:', ch, sep = ' '))
}
colnames(ts_dataset) <- channels
ts_dataset[1:10,1]
dim(ts_dataset)
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset[1:10,1]
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
ts_dataset[300:400,1]
dim(ts_datset)
dim(ts_dataset)
ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
ts_dataset[300:400,1]
name <- paste(prefix, i, '.bdf', sep = '')
print(name)
bdf_header <- readEdfHeader(name)
signal <- readEdfSignals(bdf_header)
ts_dataset <- c()
for(ch in channels){
temp <- signal[[ch]]$signal
ts_dataset <- cbind(ts_dataset, temp)
print(paste('Loading... channel:', ch, sep = ' '))
}
colnames(ts_dataset) <- channels
ts_dataset <- ts_dataset[-(1:2560),]
ts_dataset <- apply(ts_dataset, 2, FUN = detrending)
# ts_dataset <- apply(ts_dataset, 2, FUN = normalize)
ts_dataset <- scale(ts_dataset)
ts_dataset[300:400,1]
data1 <- na.omit(ts_dataset) # remove NA values (after detrending, we have NA for the begining and ending time series)
MTSplot(data1)
sd(data1[,1])
mean(data[,1])
mean(data[,2])
sd(data[,2])
sd(data[,3])
sd(data[,4])
sd(data[,5])
sd(data[,6])
sd(data1[,2])
sd(data1[,])
sd(data1[,3])
sd(data1[,4])
sd(data1[,5])
